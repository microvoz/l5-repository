<?php

$NAMESPACE$

use Illuminate\Http\Request;

use $APPNAME$Http\Requests;
use Prettus\Validator\Contracts\ValidatorInterface;
use Prettus\Validator\Exceptions\ValidatorException;
$REPOSITORY$
$VALIDATOR$
use App\Utilities\Responses\Responses;

/**
 * Class $CONTROLLER$Controller.
 *
 * @package $NAMESPACE$
 */
class $CONTROLLER$Controller extends Controller
{
    /**
     * @var $CLASS$Repository
     */
    protected $repository;

    /**
     * @var $CLASS$Validator
     */
    protected $validator;

    /**
     * $CONTROLLER$Controller constructor.
     *
     * @param $CLASS$Repository $repository
     * @param $CLASS$Validator $validator
     */
    public function __construct($CLASS$Repository $repository, $CLASS$Validator $validator)
    {
        $this->repository = $repository;
        $this->validator  = $validator;
    }

    /**
     * Display a listing of the resource.
     *
     * @param  Request $request
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
       $method = 'paginate';
        if ($request->has('no-paginate')) {
            $method = 'get';
        }
        
        $$PLURAL$ = $this->repository->allCustom($request, null, ['*'], $method);

        if (request()->wantsJson()) {
            return response()->json($$PLURAL$, $$PLURAL$->status_code);
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  Request $request
     *
     * @return \Illuminate\Http\Response
     *
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function store(Request $request)
    {
        try {
            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_CREATE);
            $$SINGULAR$ = $this->repository->create($request->all());

            if (request()->wantsJson()) {
                return response()->json($$SINGULAR$, $$SINGULAR$->status_code);
            }
        }
        catch (ValidatorException $e) {
            if ($request->wantsJson()) {
                return response()->json(Responses::response409FieldRequired($e->getMessageBag()));
            }
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $$SINGULAR$ = $this->repository->find($id);

        if (request()->wantsJson()) {
            return response()->json($$SINGULAR$, $$SINGULAR$->status_code);
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  Request $request
     * @param  string            $id
     *
     * @return Response
     *
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function update(Request $request, $id)
    {
        try {
            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_UPDATE);
            $$SINGULAR$ = $this->repository->update($request->all(), $id);

            if (request()->wantsJson()) {
                return response()->json($$SINGULAR$, $$SINGULAR$->status_code);
            }
        }
        catch (ValidatorException $e) {
            if ($request->wantsJson()) {
                return response()->json(Responses::response409FieldRequired($e->getMessageBag()));
            }
        }
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $deleted = $this->repository->delete($id);

        if (request()->wantsJson()) {
            return response()->json($deleted, $deleted->status_code);
        }
    }
}
